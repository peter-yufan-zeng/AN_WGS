SAMPLES = ["HPV5"]



def concat_vcf(wildcards):
	return expand("results/mutect2/" + wildcards.sample + "/" + wildcards.sample + "P_" + wildcards.sample +  "R_vs_" + wildcards.sample + "N.{chr}.vcf", chr = CHROMOSOMES)

rule all:
	input:
		expand("results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.vcf", sample = SAMPLES),
		expand("results/mutect2/{sample}/forced_{sample}P_vs_{sample}N.vcf",sample = SAMPLES),
		expand("results/mutect2/{sample}/forced_{sample}R_vs_{sample}N.vcf",sample = SAMPLES)


REF = "$SCRATCH/igenomes_ref/Homo_sapiens_assembly38.fasta"
GERMLINE = "$SCRATCH/igenomes_ref/gnomAD.r2.1.1.GRCh38.PASS.AC.AF.only.vcf.gz"
PON = "$SCRATCH/igenomes_ref/1000g_pon.hg38.vcf.gz"
exac_common = "/gpfs/fs0/scratch/n/nicholsa/zyfniu/igenomes_ref/somatic-hg38_small_exac_common_3.hg38.vcf.gz"

CHROMOSOMES = ['chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9', 'chr10', \
               'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', \
               'chr20', 'chr21', 'chr22', 'chrX', 'chrY']

rule mutect2_multi:
	input:
		normal = "{sample}N/Recalibrated/{sample}N.recal.bam",
		primary = "{sample}P/Recalibrated/{sample}P.recal.bam",
		recurrence = "{sample}R/Recalibrated/{sample}R.recal.bam"
	output:
		vcf = "results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N.{chr}.vcf",
		f12 = "results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N_f12.{chr}.tar.gz"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" Mutect2 -R {REF} \
		-I {input.normal}  \
		-I {input.primary} \
		-I {input.recurrence} \
		-normal {wildcards.sample}N \
		-L {wildcards.chr} \
		--germline-resource {GERMLINE} \
		--panel-of-normals {PON} --f1r2-tar-gz {output.f12} \
		-O {output.vcf}
		"""

rule merge_mutect2_vcf:
	input:
		concat_vcf
	output:
		"results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N.vcf"
	threads: 2
	shell:
		"vcf-concat {input} > {output}"
 
def concat_vcf_stats(wildcards):
	return expand("results/mutect2/" + wildcards.sample + "/" + wildcards.sample + "P_" + wildcards.sample +  "R_vs_" + wildcards.sample + "N.{chr}.vcf.stats", chr = CHROMOSOMES)

rule merge_stats:
	input:
		concat_vcf_stats
	output:
		"results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N_merged.stats"	
	threads: 2
	run:
		import os, glob
		cmd = "gatk MergeMutectStats "
		for input_file in input:
			cmd = cmd + " --stats " + input_file
		cmd = cmd + " -O {output}"
		shell(cmd)

def concat_vcf_f12(wildcards):
	return expand("results/mutect2/" + wildcards.sample + "/" + wildcards.sample + "P_" + wildcards.sample +  "R_vs_" + wildcards.sample + "N_f12.{chr}.tar.gz", chr = CHROMOSOMES)

rule gatk_LearnOrientationModel:
	input:
		concat_vcf_f12
	output:
		model = "results/mutect2/{sample}/read_orientation_model.tar.gz"
	run:
		
		import os, glob
		cmd = "gatk LearnReadOrientationModel "
		for input_file in input:
			cmd = cmd + " -I " + input_file
		cmd = cmd + " -O {output}"
		shell(cmd)

	#	gatk --java-options "-Xmx8g" LearnReadOrientationModel \
	#	-I {input} -O {output.model}
	#	"""

rule gatk_get_pileupsummaries_normal:
	input:
		##Downloaded from https://console.cloud.google.com/storage/browser/_details/gatk-best-practices/somatic-hg38/
		common_biallelic_vcf =  exac_common,
		normal = "{sample}N/Recalibrated/{sample}N.recal.bam"
	output:
		summary = "results/mutect2/{sample}/normal_pileupsummaries.table"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" GetPileupSummaries \
		-I {input.normal} \
		-V {input.common_biallelic_vcf} \
		-L {input.common_biallelic_vcf} \
		-O {output.summary}
		"""


rule gatk_get_pileupsummaries_primary:
	input:
		##Downloaded from https://console.cloud.google.com/storage/browser/_details/gatk-best-practices/somatic-hg38/
		common_biallelic_vcf =  exac_common,
		primary = "{sample}P/Recalibrated/{sample}P.recal.bam"
	output:
		summary = "results/mutect2/{sample}/primary_pileupsummaries.table"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" GetPileupSummaries \
		-I {input.primary} \
		-V {input.common_biallelic_vcf} \
		-L {input.common_biallelic_vcf} \
		-O {output.summary}
		"""

rule gatk_get_pileupsummaries_recurrence:
	input:
		##Downloaded from https://console.cloud.google.com/storage/browser/_details/gatk-best-practices/somatic-hg38/
		common_biallelic_vcf =  exac_common,
		recurrence = "{sample}R/Recalibrated/{sample}R.recal.bam"
	output:
		summary = "results/mutect2/{sample}/recurrence_pileupsummaries.table"
	threads: 2
	shell:
                """
		gatk --java-options "-Xmx8g" GetPileupSummaries \
		-I {input.recurrence} \
		-V {input.common_biallelic_vcf} \
		-L {input.common_biallelic_vcf} \
		-O {output.summary}
                """

rule gatk_calcContam_primary:
	input:	
		normal = "results/mutect2/{sample}/normal_pileupsummaries.table",
		primary = "results/mutect2/{sample}/primary_pileupsummaries.table"
	output:
		contamTable = "results/mutect2/{sample}/primary_calContam.table",
		segment = "results/mutect2/{sample}/primary_tumor.segment"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" CalculateContamination \
		-I {input.normal} \
		-matched {input.primary} \
		--tumor-segmentation {output.segment} \
		-O {output.contamTable}
		"""

rule gatk_calcContam_recurrence:
	input:	
		normal = "results/mutect2/{sample}/normal_pileupsummaries.table",
		recurrence = "results/mutect2/{sample}/recurrence_pileupsummaries.table"
	output:
		contamTable = "results/mutect2/{sample}/recurrence_calContam.table",
		segment = "results/mutect2/{sample}/recurrence_tumor.segment"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" CalculateContamination \
		-I {input.normal} \
		-matched {input.recurrence} \
		--tumor-segmentation {output.segment} \
		-O {output.contamTable}
		"""

rule index_unfiltered_vcf:
	input:
		vcf = "results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N.vcf",
	output:
		vcf_tbi = "results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N.vcf.idx"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" IndexFeatureFile \
		-I {input.vcf} \
		--output {output.vcf_tbi}
		"""


rule gatk_filterMutect:
	input:
		p_contamTable = "results/mutect2/{sample}/primary_calContam.table",
		p_segment = "results/mutect2/{sample}/primary_tumor.segment",
		vcf_tbi = "results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N.vcf.idx",
		r_contamTable = "results/mutect2/{sample}/recurrence_calContam.table",
		r_segment = "results/mutect2/{sample}/recurrence_tumor.segment",
		vcf = "results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N.vcf",
		model = "results/mutect2/{sample}/read_orientation_model.tar.gz",
		stats = "results/mutect2/{sample}/{sample}P_{sample}R_vs_{sample}N_merged.stats"	
	output:
		filter_vcf = "results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.{chr}.vcf"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" FilterMutectCalls \
		--ob-priors {input.model} \
		-stats {input.stats} \
		-R {REF} \
		-V {input.vcf} \
		-L {wildcards.chr} \
		--output {output.filter_vcf}
		"""

#--tumor-segmentation {input.p_segment} 
#--tumor-segmentation {input.r_segment} 
#--contamination-table {input.p_contamTable}
#--contamination-table {input.r_contamTable}



def concat_vcf_filtered(wildcards):
	return	expand("results/mutect2/" + wildcards.sample + "/filtered_" + wildcards.sample + "P_" + wildcards.sample + "R_vs_" + wildcards.sample + "N.{chr}.vcf", chr = CHROMOSOMES)

rule merge_mutect2_vcf_filtered:
	input:
		concat_vcf_filtered
	output:
		"results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.vcf"
	threads: 2
	shell:
		"vcf-concat {input} > {output}"


rule index_filtered_vcf:
	input:
		vcf = "results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.vcf",
	output:
		vcf_tbi = "results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.vcf.idx"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" IndexFeatureFile \
		-I {input.vcf} \
		--output {output.vcf_tbi}
		"""

rule mutect2_force_multi_primary:
	input:
		normal = "{sample}N/Recalibrated/{sample}N.recal.bam",
		primary = "{sample}P/Recalibrated/{sample}P.recal.bam",
		combined_vcf = "results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.vcf",
		index = "results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.vcf.idx"
	output:
		vcf = "results/mutect2/{sample}/forced_{sample}P_vs_{sample}N.{chr}.vcf"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" Mutect2 \
		-R {REF} \
		-I {input.primary} \
		-alleles {input.combined_vcf} \
		-L {wildcards.chr} \
		-O {output.vcf}
		"""

rule mutect2_force_multi_recurrence:
	input:
		normal = "{sample}N/Recalibrated/{sample}N.recal.bam",
		recurrence = "{sample}R/Recalibrated/{sample}R.recal.bam",
		combined_vcf = "results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.vcf",	
		index = "results/mutect2/{sample}/filtered_{sample}P_{sample}R_vs_{sample}N.vcf.idx"
	output:
		vcf = "results/mutect2/{sample}/forced_{sample}R_vs_{sample}N.{chr}.vcf"
	threads: 2
	shell:
		"""
		gatk --java-options "-Xmx8g" Mutect2 \
		-R {REF} \
		-I {input.recurrence} \
		-alleles {input.combined_vcf} \
		-L {wildcards.chr} \
		-O {output.vcf}
                """

rule annotate:
	input:
		vcf = "results/mutect2/{sample}/forced_{sample}R_vs_{sample}N.{chr}.vcf"
	output:
		
	threads: 2
	shell:
		"""
		nextflow sarek/main.nf -c nextflow.config --tools snpeff --step annotate --input {input} -profile singularity --skip_qc "all"
		"""

def concat_vcf_primary(wildcards):
	return	expand("results/mutect2/" + wildcards.sample + "/forced_" + wildcards.sample + "P_vs_" + wildcards.sample + "N.{chr}.vcf", chr = CHROMOSOMES)

def concat_vcf_recurrence(wildcards):
	return	expand("results/mutect2/" + wildcards.sample + "/forced_" + wildcards.sample + "R_vs_" + wildcards.sample + "N.{chr}.vcf", chr = CHROMOSOMES)

rule merge_mutect2_vcf_primary:
	input:
		concat_vcf_primary
	output:
		"results/mutect2/{sample}/forced_{sample}P_vs_{sample}N.vcf"
	threads: 2
	shell:
		"vcf-concat {input} > {output}"

rule merge_mutect2_vcf_recurrence:
	input:
		concat_vcf_recurrence
	output:
		"results/mutect2/{sample}/forced_{sample}R_vs_{sample}N.vcf"
	threads: 2
	shell:
		"vcf-concat {input} > {output}"
